# Copyright 2022 Stefano Cottafavi <stefano.cottafavi@gmail.com>.
# SPDX-License-Identifier: GPL-2.0-only

name: 'KiCad publish plugin'
description: 'Publish a plugin to the official KiCad repository'

inputs:
  tag:
    type: string
    description: Tag to release
    default: ""

  files:
    description: 'Plugin files (to move into "plugins" folder)'
    required: false
    default: '*.py *.png'
  icon:
    description: 'Icon file'
    required: false
    default: 'assets/icon.png'
  deploy:
    type: boolean
    description: Deploy to KiCad repo
    default: false
  gitlab_user:
    description: 'GitLab username'
    required: false
    default: "${{github.actor}}"
  gitlab_branch:
    description: 'GitLab branch'
    default: "${{ github.event.repository.name }}"
  gitlab_folder:
    description: 'GitLab folder'
    default: "com.github.${{github.actor}}.${{github.event.repository.name}}"

  # TODO: replace with secrets
  # https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/GitHub-Actions-Secrets-Example-Token-Tutorial
  gitlab_name:
    description: 'GitLab user name'
    default: "github"
  gitlab_token:
    description: 'GitLab token'
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Set environment
      run: |
        echo "RELEASE_VERSION=${{inputs.tag}}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=${{ github.event.repository.name }}-pcm.zip" >> $GITHUB_ENV
        echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Prepare folders
      run: |
        mkdir plugins resources
        mv ${{inputs.files}} plugins
        mv ${{inputs.icon}} resources
        zip -r ${{env.PACKAGE_NAME}} plugins resources metadata.json
      shell: bash


    # Create tag, if triggered manually
    - name: Create Tag
      if: github.event_name == 'workflow_dispatch'
      uses: negz/create-tag@v1
      with:
        version: ${{ inputs.tag }}
        message: "Tag created automatically"
        #token: ${{ secrets.GITHUB_TOKEN }}


    # Release (local stuff)
    - name: Update metadata (package)
      run: |
        tmp=$(mktemp)
        jq '.versions[0].download_url = "${{github.server_url}}/${{github.repository}}/releases/download/${{env.RELEASE_VERSION}}/${{env.PACKAGE_NAME}}"' metadata.json > "$tmp"
        mv "$tmp" metadata.json
      shell: bash

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{inputs.tag}}
        files: |
          ${{env.PACKAGE_NAME}}
          metadata.json


    # Deploy (remote stuff)
    - name: Get statistics
      if: inputs.deploy == 'true'
      run: |
        echo "FILE_SHA=$(shasum -a 256 ${{env.PACKAGE_NAME}} | cut -d ' ' -f1)" >> $GITHUB_ENV
        echo "FILE_SIZE=$(wc -c < ${{env.PACKAGE_NAME}})" >> $GITHUB_ENV
        echo "FILE_SIZE_UC=$(unzip -l ${{env.PACKAGE_NAME}} | tail -1 | xargs | cut -d ' ' -f1)" >> $GITHUB_ENV
      shell: bash

    - name: Update metadata (metadata repository)
      if: inputs.deploy == 'true'
      run: |
        tmp=$(mktemp)
        jq '.versions[0] += {"download_sha256": "${{ env.FILE_SHA }}", "download_size": ${{ env.FILE_SIZE }}, "install_size": ${{ env.FILE_SIZE_UC }} }' metadata.json > "$tmp"
        mv "$tmp" metadata.json
      shell: bash

    - name: Push to GitLab repository
      if: inputs.deploy == 'true'
      run: |
        git clone https://${{inputs.gitlab_name}}:${{inputs.gitlab_token}}@gitlab.com/${{inputs.gitlab_user}}/metadata.git --branch ${{inputs.gitlab_branch}}
        cp metadata.json metadata/packages/${{inputs.gitlab_folder}}
        cd metadata
        git config user.name "${{github.actor}}"
        git config user.email "${{github.actor}}@users.noreply.github.com"
        git commit -am "updated metadata.json"
        git push origin @
      shell: bash