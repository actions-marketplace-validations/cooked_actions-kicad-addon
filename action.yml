# Copyright 2022 Stefano Cottafavi <stefano.cottafavi@gmail.com>.
# SPDX-License-Identifier: GPL-2.0-only

name: 'KiCad publish plugin'
description: 'Publish a plugin to the official KiCad repository'

inputs:
  # addon metadata
  name:
    description: Addon name
    default: ${{github.event.repository.name}}
  desc:
    description: "Addon description (short)"
    default: ""
  identifier:
    description: "Addon identifier"
    default: "com.github.${{github.actor}}.${{github.event.repository.name}}"
  type:
    description: Addon (plugin, library, colortheme)
    default: "plugin"
  author_name: 
    description: Addon author
    default: "${{github.actor}}"
  license:
    description: Addon license
    default: "GPL-2.0"
  version:
    description: Addon version number
    default: ""
  kicad_version:
    description: KiCad version number
    default: "6.0"
  status:
    description: Addon status (stable, testing, development, deprecated, invalid)
    default: "stable"

  # actions parameters
  files:
    description: 'Plugin files (to move into "plugins" folder)'
    default: '*.py *.png'
  icon:
    description: 'Icon file'
    default: 'assets/icon.png'
  deploy:
    description: Deploy to KiCad repo
    default: false
  gitlab_user:
    description: 'GitLab username'
    default: "${{github.actor}}"
  gitlab_branch:
    description: 'GitLab branch'
    default: "${{ github.event.repository.name }}"
  gitlab_folder:
    description: 'GitLab folder'
    default: "com.github.${{github.actor}}.${{github.event.repository.name}}"
  gitlab_name:
    description: 'GitLab token name'
    default: "github"
  gitlab_token:
    description: 'GitLab token secret'
    default: ""

runs:
  using: 'composite'
  steps:
    - name: Set environment
      run: |
        echo "PACKAGE_NAME=${{ github.event.repository.name }}-pcm.zip" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v3
    
    
    # Release (local stuff)
    - name: Prepare metadata file
      # fill in root elements, then author, resources and versions
      run: >
        jq '. + { name: "${{inputs.name}}", description: "${{inputs.desc}}", identifier: "${{inputs.identifier}}", type: "${{inputs.type}}", license: "${{inputs.license}}",
        versions[0].version: "${{inputs.version}} }' metadata.json
      shell: bash

    - name: Prepare and zip folders
      run: |
        mkdir plugins resources
        mv ${{inputs.files}} plugins
        mv ${{inputs.icon}} resources
        zip -r ${{env.PACKAGE_NAME}} plugins resources metadata.json
      shell: bash

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{inputs.version}}"
        files: |
          ${{env.PACKAGE_NAME}}
          metadata.json


    # Deploy (remote stuff)
    - name: Update metadata (with stats for metadata repository)
      if: inputs.deploy == 'true'
      run: |
        jq '.versions[0] += {"download_sha256": "$(shasum -a 256 ${{env.PACKAGE_NAME}} | cut -d ' ' -f1)" }' metadata.json
        jq '.versions[0] += {"download_size": $(wc -c < ${{env.PACKAGE_NAME}}) }' metadata.json
        jq '.versions[0] += {"install_size": $(unzip -l ${{env.PACKAGE_NAME}} | tail -1 | xargs | cut -d ' ' -f1) }' metadata.json
      shell: bash

    - name: Push to GitLab repository
      if: inputs.deploy == 'true'
      run: |
        git clone https://${{inputs.gitlab_name}}:${{inputs.gitlab_token}}@gitlab.com/${{inputs.gitlab_user}}/metadata.git --branch ${{inputs.gitlab_branch}}
        cp metadata.json metadata/packages/${{inputs.gitlab_folder}}
        cd metadata
        git config user.name "${{github.actor}}"
        git config user.email "${{github.actor}}@users.noreply.github.com"
        git commit -am "updated metadata.json"
        git push origin @
      shell: bash